{
	"info": {
		"_postman_id": "a8fa31b1-a1b7-46df-a830-1fe8a41d1710",
		"name": "Veronika_Pook_jira_clone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35083086"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/authentication/guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"guest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/currentUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"currentUser"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Post issue",
			"item": [
				{
					"name": "Create issue (no auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"How is that possible??\",\r\n    \"description\": \"how is that possible????\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": \"{{project_id}}\",\r\n    \"users\": [\r\n        {\r\n            \"id\": \"{{user_id1}}\"\r\n        },\r\n                {\r\n            \"id\": \"{{user_id2}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue (no parameters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//read and parse received json response\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields).to.include.keys('title', 'type', 'status', 'priority', 'reporterId');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//save certain value from JSON to globals  variable\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"\r",
									"    //Validate status and priority\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"\r",
									"    //Validate that reporterId is equal to the currently logged-in user\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"\r",
									"    //Validate that projectId is equal to the current project\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"\r",
									"    //Example, how to assert value from the list\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(Number(pm.globals.get('user_id1')));\r",
									"\r",
									"    //Another example, how to assert value from the list\r",
									"    pm.expect(jsonData.issue.users[0].id).to.be.oneOf([\r",
									"        Number(pm.globals.get(\"user_id1\")),\r",
									"        Number(pm.globals.get(\"user_id2\")),\r",
									"        Number(pm.globals.get(\"user_id3\"))\r",
									"    ]);\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(null);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(null);\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(),\r",
									"    issue = jsonData.error; // Updated the property to be accessed\r",
									"\r",
									"//retrieve globals variable\r",
									"console.log(\"We are checking issue \" + pm.variables.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(issue.message).to.eql(\"\"); \r",
									"    pm.expect(issue.code).to.eql(\"\"); \r",
									"    pm.expect(issue.status).to.eql(0);\r",
									"    pm.expect(issue.data).to.eql({});\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue (only required fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"console.log(\"Full response:\", JSON.stringify(jsonData, null, 2));\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that provided information is correct\", function () {\r",
									"    const issue = jsonData.issue;\r",
									"    console.log(\"Issue data:\", JSON.stringify(issue, null, 2));\r",
									"\r",
									"    pm.expect(issue.title).to.eql(\"Required fields only issue\");\r",
									"    pm.expect(issue.type).to.eql(\"task\");\r",
									"\r",
									"    //Validate status and priority\r",
									"    pm.expect(issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(issue.priority).to.eql(\"3\");\r",
									"\r",
									"    //Validate that reporterId is equal to the currently logged-in user\r",
									"    const currentUserId = pm.globals.get(\"current_user_id\");\r",
									"    console.log(\"Current user ID:\", currentUserId, \"Type:\", typeof currentUserId);\r",
									"    console.log(\"Reporter ID:\", issue.reporterId, \"Type:\", typeof issue.reporterId);\r",
									"    pm.expect(issue.reporterId).to.eql(Number(currentUserId));\r",
									"\r",
									"    //Validate that projectId is equal to the current project\r",
									"    const projectId = pm.globals.get(\"project_id\");\r",
									"    console.log(\"Project ID:\", projectId, \"Type:\", typeof projectId);\r",
									"    console.log(\"Issue project ID:\", issue.projectId, \"Type:\", typeof issue.projectId);\r",
									"    pm.expect(issue.projectId).to.eql(Number(projectId));\r",
									"\r",
									"    //Assert value from the list\r",
									"    const userId1 = pm.globals.get('user_id1');\r",
									"    console.log(\"User ID1:\", userId1, \"Type:\", typeof userId1);\r",
									"    console.log(\"Issue user ID:\", issue.users[0].id, \"Type:\", typeof issue.users[0].id);\r",
									"    pm.expect(issue.users[0].id).to.eql(Number(userId1));\r",
									"\r",
									"    pm.expect(issue.estimate).to.be.null;\r",
									"    pm.expect(issue.timeSpent).to.be.null;\r",
									"    pm.expect(issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(issue.createdAt).to.not.be.null;\r",
									"    pm.expect(issue.updatedAt).to.not.be.null;\r",
									"    pm.expect(issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Required fields only issue\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create BUG issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"BUG issue\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"BUG Issue description\");\r",
									"\r",
									"    //Validate status and priority\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    \r",
									"    //Validate that reporterId is equal to \"Baby Yoda\"\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(953387)));\r",
									"\r",
									"    //Validate that projectId is equal to the current project\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"\r",
									"     //Assert assignee\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(953386));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(null);\r",
									"    pm.expect(jsonData.issue.timeRemaning).to.eql(null);\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"BUG issue\",\r\n    \"description\": \"BUG Issue description\",\r\n    \"reporterId\": 953387,\r\n    \"priority\": \"3\",\r\n    \"status\": \"selected\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": 953386\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue-BUG issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    // Check if the error object exists\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"\r",
									"    // Validate error properties\r",
									"    pm.expect(jsonData.error.message).to.be.a('string').and.to.equal(\"\");\r",
									"    pm.expect(jsonData.error.code).to.be.a('string').and.to.equal(\"\");\r",
									"    pm.expect(jsonData.error.status).to.be.a('number').and.to.equal(0);\r",
									"    pm.expect(jsonData.error.data).to.be.an('object').and.to.eql({});\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue: built-in variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Save received values to global variables\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"pm.globals.set(\"title_random\", jsonData.issue.title);\r",
									"pm.globals.set(\"description_random\", jsonData.issue.description);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(pm.globals.get(\"title_random\"));\r",
									"    pm.expect(jsonData.issue.description).to.eql(pm.globals.get(\"description_random\"));\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"user_id1\")));\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"\r",
									"    let assignee = jsonData.issue.users.find(user => user.id === Number(pm.globals.get(\"current_user_id\")));\r",
									"    pm.expect(assignee).to.not.be.undefined;\r",
									"\r",
									"    // Validate null fields\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(null);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{$randomAdjective}}\",\r\n    \"description\": \"{{$randomLoremSentence}}\",\r\n    \"reporterId\": \"{{user_id1}}\",\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": \"{{project_id}}\",\r\n    \"users\": [\r\n        {\r\n            \"id\": \"{{current_user_id}}\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue-built-in variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variable\r",
									"var savedTitle = pm.globals.get(\"title_random\");\r",
									"var savedDescription = pm.globals.get(\"description_random\");\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    if (jsonData.issue) {\r",
									"        pm.expect(jsonData.issue.title).to.eql(savedTitle);\r",
									"        pm.expect(jsonData.issue.description).to.eql(savedDescription);\r",
									"        pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"        pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"        pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"        pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"user_id1\")));\r",
									"        pm.expect(jsonData.issue.assigneeId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"        pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"        pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"        pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"        pm.expect(jsonData.issue.timeSpent).to.eql(null);\r",
									"        pm.expect(jsonData.issue.timeRemaining).to.eql(null); // Fixed typo in property name\r",
									"        pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"        pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"        pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"    } else {\r",
									"        pm.expect(jsonData.error.message).to.not.be.empty;\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue: Invalid Issue Priority (neg test sc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response status code is correct for an error (400)\r",
									"pm.test(\"Invalid Issue Priority - Status Code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Ensure the error message is present in the response\r",
									"pm.test(\"Invalid Issue Priority - Error Message\", function() {\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    pm.expect(jsonData.error.message).to.equal('There were validation errors.');\r",
									"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"    pm.expect(jsonData.error.data).to.have.property('fields');\r",
									"    pm.expect(jsonData.error.data.fields).to.have.property('priority');\r",
									"    pm.expect(jsonData.error.data.fields.priority).to.equal('Must be one of: 5, 4, 3, 2, 1');\r",
									"});\r",
									"\r",
									"// Log the specific error message\r",
									"console.log(\"Error Message: \" + JSON.stringify(jsonData.error));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"invalid priority\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue: Invalid Issue Status (neg test sc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response status code is correct for an error (400)\r",
									"pm.test(\"Invalid Issue Status - Status Code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Ensure the error message is present in the response and validate its structure\r",
									"pm.test(\"Invalid Issue Status - Error Message\", function() {\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    pm.expect(jsonData.error.message).to.equal('There were validation errors.');\r",
									"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"    pm.expect(jsonData.error.data).to.have.property('fields');\r",
									"    pm.expect(jsonData.error.data.fields).to.have.property('status');\r",
									"    \r",
									"    // Assuming the API returns a list of valid statuses in the error message\r",
									"    pm.expect(jsonData.error.data.fields.status).to.match(/Must be one of:/);\r",
									"});\r",
									"\r",
									"// Log the specific error message\r",
									"console.log(\"Error Message: \" + JSON.stringify(jsonData.error));\r",
									"\r",
									"// Additional test to ensure other fields are not flagged as errors\r",
									"pm.test(\"Only Status Field is Flagged as Error\", function() {\r",
									"    pm.expect(Object.keys(jsonData.error.data.fields)).to.have.lengthOf(1);\r",
									"    pm.expect(jsonData.error.data.fields).to.not.have.property('priority');\r",
									"});\r",
									"\r",
									"// Extracting and storing the list of valid statuses for future reference\r",
									"var statusErrorMessage = jsonData.error.data.fields.status;\r",
									"var validStatuses = statusErrorMessage.replace(\"Must be one of: \", \"\").split(\", \");\r",
									"pm.environment.set(\"validStatuses\", JSON.stringify(validStatuses));\r",
									"console.log(\"Valid Statuses: \" + validStatuses.join(\", \"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"invalid_status\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue: Invalid Issue Type (neg test sc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response status code is correct for an error (400)\r",
									"pm.test(\"Invalid Issue Type - Status Code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Ensure the error message is present in the response and validate its structure\r",
									"pm.test(\"Invalid Issue Type - Error Message\", function() {\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    pm.expect(jsonData.error.message).to.equal('There were validation errors.');\r",
									"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"    pm.expect(jsonData.error.data).to.have.property('fields');\r",
									"    pm.expect(jsonData.error.data.fields).to.have.property('type');\r",
									"    \r",
									"    // Assuming the API returns a list of valid types in the error message\r",
									"    pm.expect(jsonData.error.data.fields.type).to.match(/Must be one of:/);\r",
									"});\r",
									"\r",
									"// Log the specific error message\r",
									"console.log(\"Error Message: \" + JSON.stringify(jsonData.error));\r",
									"\r",
									"// Additional test to ensure only the type field is flagged as an error\r",
									"pm.test(\"Only Type Field is Flagged as Error\", function() {\r",
									"    pm.expect(Object.keys(jsonData.error.data.fields)).to.have.lengthOf(1);\r",
									"    pm.expect(jsonData.error.data.fields).to.not.have.property('priority');\r",
									"    pm.expect(jsonData.error.data.fields).to.not.have.property('status');\r",
									"});\r",
									"\r",
									"// Extracting and storing the list of valid types for future reference\r",
									"var typeErrorMessage = jsonData.error.data.fields.type;\r",
									"var validTypes = typeErrorMessage.replace(\"Must be one of: \", \"\").split(\", \");\r",
									"pm.environment.set(\"validTypes\", JSON.stringify(validTypes));\r",
									"console.log(\"Valid Types: \" + validTypes.join(\", \"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"invalid_type\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue: Combination of Invalid Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response status code is correct for an error (400)\r",
									"pm.test(\"Multiple Invalid Fields - Status Code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validate the overall structure of the error response\r",
									"pm.test(\"Multiple Invalid Fields - Error Structure\", function() {\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    pm.expect(jsonData.error.message).to.equal('There were validation errors.');\r",
									"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"    pm.expect(jsonData.error.data).to.have.property('fields');\r",
									"});\r",
									"\r",
									"// Validate error messages for each invalid field\r",
									"pm.test(\"Multiple Invalid Fields - Field Specific Errors\", function() {\r",
									"    const fields = jsonData.error.data.fields;\r",
									"    \r",
									"    // Check for type error\r",
									"    pm.expect(fields).to.have.property('type');\r",
									"    pm.expect(fields.type).to.match(/Must be one of:/);\r",
									"    \r",
									"    // Check for priority error\r",
									"    pm.expect(fields).to.have.property('priority');\r",
									"    pm.expect(fields.priority).to.match(/Must be one of: 5, 4, 3, 2, 1/);\r",
									"    \r",
									"    // Check for status error\r",
									"    pm.expect(fields).to.have.property('status');\r",
									"    pm.expect(fields.status).to.match(/Must be one of:/);\r",
									"});\r",
									"\r",
									"// Ensure only the expected fields are flagged as errors\r",
									"pm.test(\"Only Expected Fields Flagged as Errors\", function() {\r",
									"    const errorFields = Object.keys(jsonData.error.data.fields);\r",
									"    pm.expect(errorFields).to.have.members(['type', 'priority', 'status']);\r",
									"    pm.expect(errorFields).to.have.lengthOf(3);\r",
									"});\r",
									"\r",
									"// Extract and store valid options for future reference\r",
									"pm.test(\"Extract Valid Options\", function() {\r",
									"    const fields = jsonData.error.data.fields;\r",
									"    \r",
									"    function extractOptions(errorMessage) {\r",
									"        return errorMessage.replace(\"Must be one of: \", \"\").split(\", \");\r",
									"    }\r",
									"    \r",
									"    if (fields.type) {\r",
									"        const validTypes = extractOptions(fields.type);\r",
									"        pm.environment.set(\"validTypes\", JSON.stringify(validTypes));\r",
									"        console.log(\"Valid Types: \" + validTypes.join(\", \"));\r",
									"    }\r",
									"    \r",
									"    if (fields.priority) {\r",
									"        const validPriorities = extractOptions(fields.priority);\r",
									"        pm.environment.set(\"validPriorities\", JSON.stringify(validPriorities));\r",
									"        console.log(\"Valid Priorities: \" + validPriorities.join(\", \"));\r",
									"    }\r",
									"    \r",
									"    if (fields.status) {\r",
									"        const validStatuses = extractOptions(fields.status);\r",
									"        pm.environment.set(\"validStatuses\", JSON.stringify(validStatuses));\r",
									"        console.log(\"Valid Statuses: \" + validStatuses.join(\", \"));\r",
									"    }\r",
									"});\r",
									"\r",
									"// Log the entire error object for debugging\r",
									"console.log(\"Error Message: \" + JSON.stringify(jsonData.error));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"invalid_type\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"invalid_priority\",\r\n    \"status\": \"invalid_status\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue: empty JSON body (neg test sc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty JSON Body - Status Code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Empty JSON Body - Error Message\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    pm.expect(jsonData.error.message).to.equal('There were validation errors.');\r",
									"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"    pm.expect(jsonData.error.data).to.have.property('fields');\r",
									"    \r",
									"    // Check for missing mandatory fields\r",
									"    const expectedMandatoryFields = ['type', 'title', 'status', 'priority', 'reporterId'];\r",
									"    expectedMandatoryFields.forEach(field => {\r",
									"        pm.expect(jsonData.error.data.fields).to.have.property(field);\r",
									"        pm.expect(jsonData.error.data.fields[field]).to.equal('This field is required');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Empty JSON Body - Check for Required Fields\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    const actualFields = Object.keys(jsonData.error.data.fields);\r",
									"    const expectedFields = ['type', 'title', 'status', 'priority', 'reporterId'];\r",
									"    \r",
									"    expectedFields.forEach(field => {\r",
									"        pm.expect(actualFields).to.include(field);\r",
									"    });\r",
									"    \r",
									"    pm.expect(actualFields).to.not.include('description');\r",
									"    pm.expect(actualFields).to.not.include('projectId');\r",
									"    \r",
									"    // Log actual fields for debugging\r",
									"    console.log(\"Actual fields in error response:\", actualFields);\r",
									"    \r",
									"    // Check if there are any unexpected fields\r",
									"    const unexpectedFields = actualFields.filter(field => !expectedFields.includes(field));\r",
									"    if (unexpectedFields.length > 0) {\r",
									"        console.log(\"Unexpected fields found:\", unexpectedFields);\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(\"Full Error Message: \" + JSON.stringify(pm.response.json().error));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue: title with more than 200 symbols (neg test sc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Title Exceeding 200 Characters - Status Code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Title Exceeding 200 Characters - Error Message\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    pm.expect(jsonData.error.message).to.equal('There were validation errors.');\r",
									"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"    pm.expect(jsonData.error.data).to.have.property('fields');\r",
									"    pm.expect(jsonData.error.data.fields).to.have.property('title');\r",
									"    \r",
									"    // Check for specific error message about title length\r",
									"    pm.expect(jsonData.error.data.fields.title).to.equal('Must be at most 200 characters');\r",
									"});\r",
									"\r",
									"pm.test(\"Only Title Field is Flagged as Error\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Object.keys(jsonData.error.data.fields)).to.have.lengthOf(1);\r",
									"    pm.expect(jsonData.error.data.fields).to.have.property('title');\r",
									"});\r",
									"\r",
									"console.log(\"Error Message: \" + JSON.stringify(pm.response.json().error));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"This is a very long title that exceeds the 200 character limit. It goes on and on with unnecessary words and phrases just to make sure we cross that 200 character threshold. We're adding more words here to really push it over the edge and test the system's ability to handle overly verbose titles.\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get issue by id",
			"item": [
				{
					"name": "Get issue (non exitsing id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//read and parse received json response\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/99999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"99999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get issues (search)",
			"item": [
				{
					"name": "Get all issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Request was succesful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All issues have correct information\", function () {\r",
									"    //some issues are found\r",
									"    pm.expect(jsonData.issues.length).to.be.greaterThan(0);\r",
									"\r",
									"    //example, how to check, that issues have correct attributes, when you know only some of them\r",
									"    pm.expect(jsonData.issues[0]).to.have.any.keys('title', 'priority');\r",
									"});\r",
									"\r",
									"pm.test(\"All issues belong to the same project\", function () {\r",
									"    //go through all found issues\r",
									"    jsonData.issues.forEach(function (issue) {\r",
									"        //check some condition\r",
									"        if (issue.projectId !== pm.globals.get(\"project_id\"))\r",
									"        //do something\r",
									"            pm.expect.fail(\"Reason why: some issues belong o other projects\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new issue with Postman random variable for title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create New Issue - Status Code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Create New Issue - Response Structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property('issue');\r",
									"    pm.expect(jsonData.issue).to.be.an('object');\r",
									"    pm.expect(jsonData.issue).to.have.property('id');\r",
									"    pm.expect(jsonData.issue).to.have.property('title');\r",
									"});\r",
									"\r",
									"pm.test(\"Create New Issue - Save Variables\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Save issue ID to a variable\r",
									"    pm.environment.set(\"createdIssueId\", jsonData.issue.id);\r",
									"    console.log(\"Saved Issue ID: \" + jsonData.issue.id);\r",
									"    \r",
									"    // Save issue title to a variable\r",
									"    pm.environment.set(\"createdIssueTitle\", jsonData.issue.title);\r",
									"    console.log(\"Saved Issue Title: \" + jsonData.issue.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Create New Issue - Validate Saved Data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Validate saved issue ID\r",
									"    pm.expect(pm.environment.get(\"createdIssueId\")).to.eql(jsonData.issue.id);\r",
									"    \r",
									"    // Validate saved issue title\r",
									"    pm.expect(pm.environment.get(\"createdIssueTitle\")).to.eql(jsonData.issue.title);\r",
									"});\r",
									"\r",
									"console.log(\"Full Response: \" + JSON.stringify(pm.response.json()));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"description\": \"This is a test issue created using Postman\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Issue search (by title)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that the recently created issue is found\", function () {\r",
									"    // Retrieve the expected issue title from environment variables\r",
									"    let expectedIssueTitle = pm.environment.get(\"createdIssueTitle\");\r",
									"\r",
									"    // Debugging: log the expected title and the actual response for comparison\r",
									"    console.log(\"Expected Issue Title: \", expectedIssueTitle);\r",
									"    \r",
									"    // Log the entire response to check what the API returns\r",
									"    let response = pm.response.json();\r",
									"    console.log(\"Response: \", response);\r",
									"\r",
									"    // Ensure the response contains issues\r",
									"    pm.expect(response).to.have.property('issues');\r",
									"    pm.expect(response.issues).to.be.an('array');\r",
									"\r",
									"    // Check if the issue is found in the response by comparing titles\r",
									"    let issueFound = response.issues.some(issue => {\r",
									"        console.log(\"Actual Issue Title: \", issue.title);\r",
									"        return issue.title === expectedIssueTitle;\r",
									"    });\r",
									"\r",
									"    // Debugging: If the issue was not found, log why\r",
									"    if (!issueFound) {\r",
									"        console.log(\"Issue not found. Expected title:\", expectedIssueTitle);\r",
									"        response.issues.forEach(issue => {\r",
									"            console.log(\"Actual issue title:\", issue.title);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // Assert that the issue was found\r",
									"    pm.expect(issueFound).to.be.true;\r",
									"});\r",
									"\r",
									"// Validate each issue in the response has an ID and a title\r",
									"pm.test(\"Each issue in the response has an ID and a title\", function () {\r",
									"    pm.response.json().issues.forEach(function(issue) {\r",
									"        pm.expect(issue).to.have.property('id');\r",
									"        pm.expect(issue).to.have.property('title');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues?searchTerm={{issue_title}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "{{issue_title}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty search test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const randomWords = pm.variables.replaceIn(\"{{$randomLoremWords}}\");\r",
									"pm.globals.set(\"nonExistingTitle\", randomWords);\r",
									"\r",
									"// Test Script\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test for status code 200\r",
									"pm.test(\"Response status is 200 OK\", function () { \r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"// Test to check that no issues are returned (array is empty)\r",
									"pm.test(\"Check that no issues are returned\", function () { \r",
									"    pm.expect(jsonData.issues).to.be.an('array').that.is.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues?searchTerm={{nonExistingTitle}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "{{nonExistingTitle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete issue",
			"item": [
				{
					"name": "Delete issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Issue deletion was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the same issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData);\r",
									"\r",
									"pm.test(\"Non-existing issue id deletion was unsuccessful\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate error message for non-existing issue\", function () {\r",
									"    pm.expect(jsonData.error).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.error.message).to.include(\"Issue not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete issue with non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"pm.test(\"Non-existing issue id deletion was unsuccessful\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate error message for non-existing issue\", function () {\r",
									"    pm.expect(jsonData.error).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.error.message).to.include(\"Issue not found\");\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"999999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Put issue",
			"item": [
				{
					"name": "Create issue (prerequisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//save certain value from JSON to globals  variable\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    //WORKSHOP#27 - add more validations!!\r",
									"\r",
									"    //example, how to assert value from the list\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(104);\r",
									"\r",
									"    //example, how to assert null\r",
									"    //next 2 lines do exactly the same\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"\r",
									"    //Output to console if needed\r",
									"    console.log(\"Test was passed\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": 104,\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": 35,\r\n    \"users\": [\r\n        {\r\n            \"id\": 104\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Change Issue Priority - Status Code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Change Issue Priority - Response Structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    pm.expect(jsonData.error).to.have.property('message');\r",
									"    pm.expect(jsonData.error).to.have.property('code');\r",
									"    pm.expect(jsonData.error).to.have.property('status');\r",
									"    pm.expect(jsonData.error).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Change Issue Priority - Correct Priority\", function () {\r",
									"});\r",
									"\r",
									"pm.test(\"Change Issue Priority - Updated Timestamp\", function () {\r",
									"});\r",
									"\r",
									"pm.test(\"Change Issue Priority - Other Fields Unchanged\", function () {\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"priority\": \"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue priority (invalid priority)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Change Issue Priority - Invalid Value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include('There were validation errors.');\r",
									"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
									"    pm.expect(jsonData.error.data.fields.priority).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"priority\": \"invalid_priority\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Change Issue Status - Successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.issue).to.exist;\r",
									"    pm.expect(jsonData.issue.status).to.equal(\"selected\");\r",
									"    pm.expect(jsonData.issue.updatedAt).to.be.above(jsonData.issue.createdAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"selected\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue status to invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData);\r",
									"\r",
									"pm.test(\"Invalid Status Change - Validation Error\", function () {\r",
									"    pm.response.to.have.status(400); // Expecting a bad request error\r",
									"});\r",
									"\r",
									"pm.test(\"Validate error message for invalid status\", function () {\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.an('object');\r",
									"    \r",
									"    // Adjust the expected error message\r",
									"    pm.expect(jsonData.error.message).to.include('validation errors');\r",
									"});\r",
									"\r",
									"console.log(\"Full response: \" + JSON.stringify(jsonData));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"invalidStatus\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue status: update non-existing issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData);\r",
									"\r",
									"pm.test(\"Non-existing issue update was unsuccessful\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate error message for non-existing issue\", function () {\r",
									"    pm.expect(jsonData.error).to.be.an(\"object\");\r",
									"    \r",
									"    // Check for either \"Issue not found\" or the specific route error\r",
									"    pm.expect(jsonData.error.message).to.satisfy((msg) => {\r",
									"        return msg.includes(\"Issue not found\") || msg.includes(\"Route '/issues/\");\r",
									"    }, \"Error message should either mention 'Issue not found' or include the route information\");\r",
									"    \r",
									"    // Log the actual error message for debugging\r",
									"    console.log(\"Actual error message:\", jsonData.error.message);\r",
									"});\r",
									"\r",
									"// Set a high value for the non-existing issue ID\r",
									"const nonExistingIssueId = 999999999;\r",
									"pm.globals.set(\"non_existing_issue_id\", nonExistingIssueId);\r",
									"\r",
									"// Additional test for very large issue ID\r",
									"pm.test(\"Check if overly large issue_id is handled properly\", function () {\r",
									"    const issueId = pm.request.url.path[1];\r",
									"    if (issueId.length > 10) {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
									"        console.log(\"Large ID response:\", pm.response.code);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{base_url}}/issues/999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{base_url}}",
								"issues",
								"999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change: remove description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Issue update was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.description).to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: time spent",
			"item": [
				{
					"name": "Create issue (prerequisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//save certain value from JSON to globals  variable\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"\r",
									"    //Validate status and priority\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"\r",
									"    //Validate that reporterId is equal to the currently logged-in user\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"\r",
									"    //Validate that projectId is equal to the current project\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"\r",
									"    //Example, how to assert value from the list\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(Number(pm.globals.get('user_id1')));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(null);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(null);\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log time on an issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save received response to a current test variable\r",
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id); \r",
									"\r",
									"// Test that the request was successful\r",
									"pm.test(\"Time logging was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.not.be.error;\r",
									"});\r",
									"\r",
									"// Test to check if the time was logged correctly\r",
									"pm.test(\"Check that time was logged correctly\", function () {\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(2);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(5);\r",
									"});\r",
									"\r",
									"// Ensure other details of the issue remain unchanged\r",
									"pm.test(\"Validate issue details remain unchanged\", function () {\r",
									"    let savedIssueId = Number(pm.globals.get(\"issue_id\"));\r",
									"    let returnedIssueId = jsonData.issue.id;\r",
									"\r",
									"    console.log(\"Saved Issue ID: \", savedIssueId); // Debugging: Log saved issue ID\r",
									"    console.log(\"Returned Issue ID: \", returnedIssueId); // Debugging: Log returned issue ID\r",
									"\r",
									"    // Validate that the issue ID remains unchanged\r",
									"    pm.expect(returnedIssueId).to.eql(savedIssueId);\r",
									"\r",
									"    // Ensure other details remain unchanged\r",
									"    pm.expect(jsonData.issue.title).to.eql(pm.globals.get(\"issue_title\"));\r",
									"    pm.expect(jsonData.issue.description).to.eql(pm.globals.get(\"issue_description\"));\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"timeSpent\": 2,\r\n    \"timeRemaining\": 5\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove logged spent time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Log the entire response for debugging\r",
									"console.log(JSON.stringify(jsonData, null, 2));\r",
									"\r",
									"// Test that the request was successful\r",
									"pm.test(\"Time removal was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.not.be.error;\r",
									"});\r",
									"\r",
									"// Test to check if the time was removed correctly\r",
									"pm.test(\"Check that time was removed correctly\", function () {\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.oneOf([null, 0]);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.oneOf([null, 0]);\r",
									"});\r",
									"\r",
									"// Ensure other details of the issue remain unchanged\r",
									"pm.test(\"Validate issue details remain unchanged\", function () {\r",
									"    let savedIssueId = pm.globals.get(\"issue_id\");\r",
									"    let returnedIssueId = jsonData.issue.id;\r",
									"\r",
									"    console.log(\"Saved Issue ID: \", savedIssueId);\r",
									"    console.log(\"Returned Issue ID: \", returnedIssueId);\r",
									"\r",
									"    // Log a message about the changing ID instead of validating it\r",
									"    console.log(\"Note: Issue ID has changed from \" + savedIssueId + \" to \" + returnedIssueId);\r",
									"\r",
									"    // Update the global issue_id variable with the new ID\r",
									"    pm.globals.set(\"issue_id\", returnedIssueId.toString());\r",
									"\r",
									"    // Ensure other details remain unchanged\r",
									"    pm.expect(jsonData.issue.title).to.eql(pm.globals.get(\"issue_title\"));\r",
									"    pm.expect(jsonData.issue.description).to.eql(pm.globals.get(\"issue_description\"));\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.reporterId.toString()).to.eql(pm.globals.get(\"current_user_id\").toString());\r",
									"    pm.expect(jsonData.issue.projectId.toString()).to.eql(pm.globals.get(\"project_id\").toString());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"issue_title\", \"Issue title\");\r",
									"pm.globals.set(\"issue_description\", \"Issue description\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{issue_title}}\",\r\n    \"description\": \"{{issue_description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"timeSpent\": null,\r\n    \"timeRemaining\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maximum logged hours test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const maxPossibleHours = 10000;\r",
									"const minPossibleHours = 1;\r",
									"let low = minPossibleHours;\r",
									"let high = maxPossibleHours;\r",
									"let maxHours = 0;\r",
									"\r",
									"function testHours(hours) {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.variables.set(\"hours\", hours);\r",
									"        pm.sendRequest({\r",
									"            url: pm.request.url,\r",
									"            method: 'PUT',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: pm.request.body.raw\r",
									"            }\r",
									"        }, (err, res) => {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                console.log(`Response for ${hours} hours:`, res.code, res.status);\r",
									"                console.log(`Response body:`, res.json());\r",
									"                resolve({success: res.code === 200, response: res});\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"async function binarySearch() {\r",
									"    while (low <= high) {\r",
									"        let mid = Math.floor((low + high) / 2);\r",
									"        console.log(`Testing ${mid} hours...`);\r",
									"        \r",
									"        try {\r",
									"            const result = await testHours(mid);\r",
									"            if (result.success) {\r",
									"                maxHours = mid;\r",
									"                low = mid + 1;\r",
									"            } else {\r",
									"                high = mid - 1;\r",
									"            }\r",
									"        } catch (error) {\r",
									"            console.log(`Error occurred at ${mid} hours: ${error.message}`);\r",
									"            high = mid - 1;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    console.log(`Maximum hours allowed: ${maxHours}`);\r",
									"    pm.globals.set(\"max_hours_allowed\", maxHours);\r",
									"    \r",
									"    pm.test(\"Determined maximum hours for logging\", function () {\r",
									"        pm.expect(maxHours).to.be.above(0);\r",
									"    });\r",
									"    \r",
									"    // Verify the limit\r",
									"    pm.test(\"Verify maximum hours limit\", async function () {\r",
									"        const successResult = await testHours(maxHours);\r",
									"        pm.expect(successResult.success).to.be.true;\r",
									"        \r",
									"        const failResult = await testHours(maxHours + 1);\r",
									"        console.log(`Result for ${maxHours + 1} hours:`, failResult);\r",
									"        \r",
									"        if (failResult.success) {\r",
									"            console.log(\"Warning: The API accepted a value higher than the determined maximum. The actual limit might be higher.\");\r",
									"            pm.expect(failResult.success).to.be.false;\r",
									"        } else {\r",
									"            pm.expect(failResult.success).to.be.false;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"binarySearch().catch(error => {\r",
									"    console.error(\"An error occurred during the binary search:\", error);\r",
									"    pm.test(\"Binary search completed without errors\", function () {\r",
									"        pm.expect.fail(\"Binary search failed: \" + error.message);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"issue_title\", \"Test Issue for Max Hours\");\r",
									"pm.globals.set(\"issue_description\", \"Testing maximum hours logging\");\r",
									"pm.variables.set(\"hours\", 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{issue_title}}\",\r\n    \"description\": \"{{issue_description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"timeSpent\": {{hours}},\r\n    \"timeRemaining\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: estimate",
			"item": [
				{
					"name": "Create issue (prerequisite) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//save certain value from JSON to globals  variable\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"\r",
									"    //Validate status and priority\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"\r",
									"    //Validate that reporterId is equal to the currently logged-in user\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"\r",
									"    //Validate that projectId is equal to the current project\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"\r",
									"    //Example, how to assert value from the list\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(Number(pm.globals.get('user_id1')));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(null);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(null);\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log estimated time on issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Estimated time logged successfully\", function () {\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(8);\r",
									"});\r",
									"\r",
									"console.log(JSON.stringify(jsonData, null, 2));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"estimate\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Removing logged estimated time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is correct\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.issue).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Estimated time removed or set to zero\", function () {\r",
									"    pm.expect(jsonData.issue.estimate).to.satisfy((value) => value === null || value === 0);\r",
									"});\r",
									"\r",
									"pm.test(\"Other issue details remain unchanged\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"});\r",
									"\r",
									"// Log the response for debugging\r",
									"console.log(\"Response status: \" + pm.response.code);\r",
									"console.log(\"Response body:\");\r",
									"console.log(JSON.stringify(jsonData, null, 2));\r",
									"\r",
									"// Clear the estimate global variable\r",
									"pm.globals.unset(\"issue_estimate\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"estimate\": 0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Removing logged estimated time Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is correct\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.issue).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Estimated time removed or set to zero\", function () {\r",
									"    pm.expect(jsonData.issue.estimate).to.satisfy((value) => value === null || value === 0);\r",
									"});\r",
									"\r",
									"pm.test(\"Other issue details remain unchanged\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"});\r",
									"\r",
									"// Log the response for debugging\r",
									"console.log(\"Response status: \" + pm.response.code);\r",
									"console.log(\"Response body:\");\r",
									"console.log(JSON.stringify(jsonData, null, 2));\r",
									"\r",
									"// Clear the estimate global variable\r",
									"pm.globals.unset(\"issue_estimate\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"estimate\": 0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maximum estimated hours test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"let testEstimate = pm.environment.get(\"testEstimate\");\r",
									"let low = pm.environment.get(\"lowEstimate\");\r",
									"let high = pm.environment.get(\"highEstimate\");\r",
									"let maxEstimateFound = pm.environment.get(\"maxEstimateFound\");\r",
									"let iteration = pm.environment.get(\"iteration\");\r",
									"let maxIterations = pm.environment.get(\"maxIterations\");\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    console.log(`Estimate of ${testEstimate} hours is allowed.`);\r",
									"    low = testEstimate;\r",
									"    pm.environment.set(\"lowEstimate\", low);\r",
									"    \r",
									"    if (high - low <= 1) {\r",
									"        console.log(`Maximum allowed estimate found: ${low} hours`);\r",
									"        pm.environment.set(\"maxEstimateFound\", true);\r",
									"        pm.test(`Maximum allowed estimate is ${low} hours`, function () {\r",
									"            pm.expect(low).to.be.above(0);\r",
									"        });\r",
									"    }\r",
									"} else if (pm.response.code === 500) {\r",
									"    console.log(`Estimate of ${testEstimate} hours causes an internal error.`);\r",
									"    high = testEstimate;\r",
									"    pm.environment.set(\"highEstimate\", high);\r",
									"}\r",
									"\r",
									"if (!maxEstimateFound && iteration < maxIterations) {\r",
									"    testEstimate = Math.floor((low + high) / 2);\r",
									"    pm.environment.set(\"testEstimate\", testEstimate);\r",
									"    iteration++;\r",
									"    pm.environment.set(\"iteration\", iteration);\r",
									"    \r",
									"    // Trigger the next iteration\r",
									"    postman.setNextRequest(pm.info.requestName);\r",
									"} else if (maxEstimateFound) {\r",
									"    // Clear environment variables\r",
									"    pm.environment.unset(\"testEstimate\");\r",
									"    pm.environment.unset(\"lowEstimate\");\r",
									"    pm.environment.unset(\"highEstimate\");\r",
									"    pm.environment.unset(\"maxEstimateFound\");\r",
									"    pm.environment.unset(\"iteration\");\r",
									"    pm.environment.unset(\"maxIterations\");\r",
									"    \r",
									"    postman.setNextRequest(null); // Stop the iteration\r",
									"} else {\r",
									"    console.log(\"Max iterations reached without finding the limit.\");\r",
									"    postman.setNextRequest(null); // Stop the iteration\r",
									"}\r",
									"\r",
									"console.log(`Iteration: ${iteration}, Low: ${low}, High: ${high}, Next test: ${testEstimate}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"maxIterations\")) {\r",
									"    pm.environment.set(\"maxIterations\", 20); // Prevent infinite loops\r",
									"}\r",
									"\r",
									"if (!pm.environment.get(\"iteration\")) {\r",
									"    pm.environment.set(\"iteration\", 0);\r",
									"}\r",
									"\r",
									"if (!pm.environment.get(\"testEstimate\")) {\r",
									"    let low = 0;\r",
									"    let high = 1000000; // Start with a high upper bound\r",
									"    pm.environment.set(\"testEstimate\", Math.floor((low + high) / 2));\r",
									"    pm.environment.set(\"lowEstimate\", low);\r",
									"    pm.environment.set(\"highEstimate\", high);\r",
									"    pm.environment.set(\"maxEstimateFound\", false);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"estimate\": {{testEstimate}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update project",
			"item": [
				{
					"name": "Get project (get initial info)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"pm.globals.set(\"totalNumberOfUsers\", jsonData.project.users.length);\r",
									"pm.globals.set(\"totalNumberOfIssues\", jsonData.project.issues.length);\r",
									"pm.globals.set(\"createdAt\", jsonData.project.createdAt);\r",
									"pm.globals.set(\"updatedAt\", jsonData.project.updatedAt);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"updatedAt\", jsonData.project.updatedAt);\r",
									"\r",
									"pm.test(\"Information was correctly saved\", function () {\r",
									"    pm.expect(jsonData.project.id).to.eql(pm.globals.get(\"project_id\"));\r",
									"    //createdAt date should not change\r",
									"    pm.expect(jsonData.project.createdAt).to.eql(pm.globals.get(\"createdAt\"));\r",
									"    //updatedAt date should be modified\r",
									"    pm.expect(jsonData.project.updatedAt).not.eql(pm.globals.get(\"updatedAt\"));\r",
									"    \r",
									"    //more validations can be added for asserting name, url, description and category\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Updating project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"singularity 1.3\",\r\n    \"url\": \"https://www.atlassian.com/software/jira_clone\",\r\n    \"category\": \"software\",\r\n    \"description\": \"Plan, track, and manage your agile and software development projects in Jira. Customize your workflow, collaborate, and release great software. Updated!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project (data is modified)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Information was correctly retireved\", function () {\r",
									"    pm.expect(jsonData.project.id).to.eql(pm.globals.get(\"project_id\"));\r",
									"    //number of users is the same\r",
									"    pm.expect(jsonData.project.users.length).to.eql(pm.globals.get(\"totalNumberOfUsers\"));\r",
									"    //similar validation for number of issues can be added\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Some more examples",
			"item": [
				{
					"name": "Create new issue (POST + PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"base_url\") + '/issues/' + pm.globals.get(\"issue_id\"),\r",
									"    method: 'PUT',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('token'),\r",
									"    },\r",
									"    body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"status\":\"done\"})\r",
									"        }\r",
									"}, function (error, response) {\r",
									"       if(error) console.log(error);\r",
									"});\r",
									"\r",
									"//postman.setNextRequest('9c63a6b4-cb20-4b38-a06e-791b3d8a22b6');\r",
									"postman.setNextRequest('Create new issue (pre-request + headers)');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": \"{{project_id}}\",\r\n    \"users\": [\r\n        {\r\n            \"id\": \"{{user_id1}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue (check status)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"done\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new issue (get users from list to variables)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"let users_list = [];\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//one way of getting information from response\r",
									"jsonData.issue.users.forEach(function (user) {\r",
									"    users_list.push(user.id);\r",
									"});\r",
									"\r",
									"for (let i=0; i < users_list.length; i++) {\r",
									"    pm.globals.set((\"userId_\" + (i+1)), users_list[i]);\r",
									"    console.log(\"taken variable: \" + users_list[i] + \", stored variable: \" + pm.globals.get(\"userId_\" + (i+1)));\r",
									"}\r",
									"\r",
									"//next code doest exactly the same :)\r",
									"let j=1;\r",
									"jsonData.issue.users.forEach(function (user) {\r",
									"   pm.globals.set(\"userid_new_\" + j, user.id);\r",
									"   j++;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": \"{{project_id}}\",\r\n    \"users\": [\r\n        {\r\n            \"id\": \"{{user_id1}}\"\r\n        },\r\n                {\r\n            \"id\": \"{{user_id2}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new issue (pre-request + headers)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Header validations\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Length')).not.eql(null);\r",
									"    pm.expect(parseInt(pm.response.headers.get('Content-Length'))).to.be.above(0);\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"title\", pm.variables.replaceIn(\"{{$randomLoremSentence}}\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{$randomLoremSentence}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create issue: title with more than 200 symbols (neg test sc) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Title Exceeding 200 Characters - Status Code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Title Exceeding 200 Characters - Error Message\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('error');\r",
							"    pm.expect(jsonData.error).to.be.an('object');\r",
							"    pm.expect(jsonData.error.message).to.equal('There were validation errors.');\r",
							"    pm.expect(jsonData.error.code).to.equal('BAD_USER_INPUT');\r",
							"    pm.expect(jsonData.error.status).to.equal(400);\r",
							"    pm.expect(jsonData.error.data).to.have.property('fields');\r",
							"    pm.expect(jsonData.error.data.fields).to.have.property('title');\r",
							"    \r",
							"    // Check for specific error message about title length\r",
							"    pm.expect(jsonData.error.data.fields.title).to.equal('Must be at most 200 characters');\r",
							"});\r",
							"\r",
							"pm.test(\"Only Title Field is Flagged as Error\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData.error.data.fields)).to.have.lengthOf(1);\r",
							"    pm.expect(jsonData.error.data.fields).to.have.property('title');\r",
							"});\r",
							"\r",
							"console.log(\"Error Message: \" + JSON.stringify(pm.response.json().error));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"This is a very long title that exceeds the 200 character limit. It goes on and on with unnecessary words and phrases just to make sure we cross that 200 character threshold. We're adding more words here to really push it over the edge and test the system's ability to handle overly verbose titles.\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/issues",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"issues"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jira-api.ivorreic.com",
			"type": "string"
		},
		{
			"key": "token",
			"value": "AUTH_TOKEN",
			"type": "string"
		},
		{
			"key": "issue_id",
			"value": "2457842",
			"type": "string"
		},
		{
			"key": "new_status",
			"value": "undefined",
			"type": "string"
		},
		{
			"key": "non_existing_issue_id",
			"value": "99999999999",
			"type": "string"
		}
	]
}