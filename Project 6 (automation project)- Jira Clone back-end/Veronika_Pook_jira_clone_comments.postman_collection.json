{
	"info": {
		"_postman_id": "df776e7c-4781-4cbc-bffa-d9e8008ce691",
		"name": "Veronika_Pook_jira_clone_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35083086"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/authentication/guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"guest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/currentUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"currentUser"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create comments",
			"item": [
				{
					"name": "1.1 Create issue (prerequisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"New Issue for Comments\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"This issue is created to test comments.\");\r",
									"\r",
									"\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(Number(pm.globals.get(\"current_user_id\")));\r",
									"\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(Number(pm.globals.get(\"project_id\")));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(Number(pm.globals.get('user_id1')));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(null);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(null);\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"New Issue for Comments\",\r\n    \"type\": \"task\",\r\n    \"status\": \"backlog\",\r\n    \"priority\": \"3\",\r\n    \"description\": \"This issue is created to test comments.\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.1.2 Check that issue was created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Check if the issue exists and matches the created issue\r",
									"pm.test(\"Verify Issue Creation - Status Code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Issue Details\", function () {\r",
									"    pm.expect(jsonData.issue).to.be.an('object');\r",
									"    pm.expect(jsonData.issue.id).to.equal(parseInt(pm.globals.get(\"issue_id\")));\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure issue_id is available\r",
									"pm.globals.get(\"issue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Add first comment to issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Save comment id\r",
									"pm.globals.set(\"comment_id_1\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"First comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is the first comment\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"This is the first comment\",\r\n  \"issueId\": {{issue_id}},\r\n  \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Add second comment to issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Save second comment id\r",
									"pm.globals.set(\"comment_id_2\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Second comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is the second comment\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*",
									"const randomText = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");",
									"pm.environment.set(\"description\", randomText);",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"This is the second comment\",\r\n  \"issueId\": {{issue_id}},\r\n  \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 Check that comments were added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"// Verify both comments exist\r",
									"pm.test(\"Both comments exist in the issue details\", function () {\r",
									"    let comments = jsonData.issue.comments;\r",
									"    let commentIds = comments.map(comment => comment.id);\r",
									"\r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"comment_id_1\")));\r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"comment_id_2\")));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 1.5 Add comment (no user_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment creation with missing user_id failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors\");\r",
									"});\r",
									"\r",
									"//Comment creation with missing user_id was unsuccessful | BUG - AssertionError: expected response to have status code 400 but got 500\""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*",
									"const randomText = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");",
									"pm.environment.set(\"description\", randomText);",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"This is the comment test with missing user_id\",\r\n  \"issueId\": {{issue_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 1.5.2 Add comment (no issue_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment creation with missing issue_id failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors\");\r",
									"});\r",
									"\r",
									"//BUG - AssertionError: expected response to have status code 400 but got 500\""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*",
									"const randomText = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");",
									"pm.environment.set(\"description\", randomText);",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"This is the comment test with missing issue_id\",\r\n  \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5.3 Add comment (no comment text)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment creation with missing fields failed\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*",
									"const randomText = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");",
									"pm.environment.set(\"description\", randomText);",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6 Add comment (Cyrillic letters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"comment_id_special_1\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Special characters allowed in comments\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment.body).to.include(\"Привет\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"Привет\",\r\n  \"issueId\": {{issue_id}},\r\n  \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6.1 Check that comment was added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Comment with Cyrillic text exists in the issue details\", function () {\r",
									"    let comments = jsonData.issue.comments;\r",
									"    let commentIds = comments.map(comment => comment.id);\r",
									"\r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"comment_id_special_1\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6.2 Add comment (special characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"comment_id_special_2\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation with special symbols was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment).to.exist;\r",
									"    pm.expect(jsonData.comment.body).to.include(\"€¥£¢∞∑π√÷×±≈\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a comment with special symbols: €¥£¢∞∑π√÷×±≈\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6.3 Check that comment was added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Comment with special characters exists in the issue details\", function () {\r",
									"    let comments = jsonData.issue.comments;\r",
									"    let commentIds = comments.map(comment => comment.id);\r",
									"\r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"comment_id_special_2\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6.4 Add comment (Estonian letters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"comment_id_special_3\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation with Estonian letters- Ä, Ö, Ü- was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment).to.exist;\r",
									"    pm.expect(jsonData.comment.body).to.include(\"jää-äär, ööbik, ülipüüdlik\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a comment with Estonian letters: jää-äär, ööbik, ülipüüdlik\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6.5 Check that comment was added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Comment with Estonian letters- Ä, Ö, Ü- exists in the issue details\", function () {\r",
									"    let comments = jsonData.issue.comments;\r",
									"    let commentIds = comments.map(comment => comment.id);\r",
									"\r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"comment_id_special_3\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update comments",
			"item": [
				{
					"name": "2.1 Create a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Save comment id\r",
									"pm.globals.set(\"comment_id_3\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is a comment to be updated.\");\r",
									"});\r",
									"\r",
									"console.log(\"Created comment ID:\", jsonData.comment.id);\r",
									"console.log(\"Stored comment_id_3:\", pm.globals.get(\"comment_id_3\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"This is a comment to be updated.\",\r\n  \"issueId\": {{issue_id}},\r\n  \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1.1 Check that the comment was added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(),\r",
									"    commentIds = jsonData.issue.comments.map(comment => comment.id);\r",
									"\r",
									"pm.test(\"Verify Comment Creation - Status Code\", function () {     \r",
									"    pm.response.to.have.status(200); \r",
									"});  \r",
									"\r",
									"pm.test(\"Verify Comment Details\", function () {        \r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"comment_id_3\"))); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure comment_id is available\r",
									"pm.globals.get(\"comment_id_3\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1.2 Update created comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");\r",
									"pm.globals.get(\"comment_id_3\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment update was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This comment has been updated.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This comment has been updated.\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id_3}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 2.2 Delete the comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");\r",
									"pm.globals.get(\"comment_id_3\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response structure\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.comment).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Comment should be marked as deleted\", function () {\r",
									"    pm.expect(jsonData.comment.deletedAt).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Log the response for debugging\r",
									"console.log(\"Delete Comment Response:\", JSON.stringify(jsonData, null, 2));\r",
									"\r",
									"//Expected Behavior: The API should return a 404 status code or a response indicating the comment has been deleted.\r",
									"//Actual Behavior: The API returns a 200 status code with the full comment details."
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id_3}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3  Updating the deleted comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Attempt to update deleted comment\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This comment should not be updated because it was deleted.\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id_3}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 Comment for testing missing fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Save comment id\r",
									"pm.globals.set(\"comment_id_4\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is a test comment.\");\r",
									"});\r",
									"\r",
									"console.log(\"Created comment ID:\", jsonData.comment.id);\r",
									"console.log(\"Stored comment_id_4:\", pm.globals.get(\"comment_id_4\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a test comment.\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4.1 Update comment with missing 'body'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Update comment with missing 'body'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");\r",
									"pm.globals.get(\"comment_id_4\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": null,\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id_4}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 2.4.2 Update comment with missing 'user_id'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Update comment with missing 'userId'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors.\");\r",
									"});\r",
									"\r",
									"// Backend BUG- expected response to have status code 400 but got 200. No changes in the UI."
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");\r",
									"pm.globals.get(\"comment_id_4\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a test comment.\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id_4}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 2.4.3 Update comment missing 'issue_id\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Update comment missing 'issueId' field\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors.\");\r",
									"});\r",
									"\r",
									"// Backend BUG- expected response to have status code 400 but got 200. No changes in the UI."
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.get(\"issue_id\");\r",
									"pm.globals.get(\"comment_id_4\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a test comment.\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id_4}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id_4}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean Postman variables",
			"item": [
				{
					"name": "Delete all global and environmental variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Clear all global variables\r",
									"pm.globals.clear();\r",
									"pm.test(\"All global variables have been cleared\", function () {\r",
									"    pm.expect(Object.keys(pm.globals.toObject()).length).to.eql(0);\r",
									"});\r",
									"\r",
									"// Clear all environment variables\r",
									"pm.environment.clear();\r",
									"pm.test(\"All environment variables have been cleared\", function () {\r",
									"    pm.expect(Object.keys(pm.environment.toObject()).length).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if variables are cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if all variables are cleared\", function () {\r",
									"    pm.expect(Object.keys(pm.globals.toObject())).to.have.lengthOf(0); // for global variables\r",
									"    pm.expect(Object.keys(pm.environment.toObject())).to.have.lengthOf(0); // for environment variables\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure comment_id is available\r",
									"pm.globals.get(\"comment_id_3\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://postman-echo.com/get",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jira-api.ivorreic.com",
			"type": "string"
		},
		{
			"key": "issue_id",
			"value": "2620782",
			"type": "string"
		},
		{
			"key": "token",
			"value": "AUTH_TOKEN",
			"type": "string"
		}
	]
}