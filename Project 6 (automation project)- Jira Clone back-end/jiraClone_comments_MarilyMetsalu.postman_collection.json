{
	"info": {
		"_postman_id": "2008cecd-3f7f-47ed-ba0f-07c13056e745",
		"name": "jiraClone_comments_MarilyMetsalu",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12562840"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/authentication/guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"guest"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Current settings",
			"item": [
				{
					"name": "Get project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/currentUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"currentUser"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment field testing",
			"item": [
				{
					"name": "Create Comments",
					"item": [
						{
							"name": "Add new issue (prerequisite step)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
											"\r",
											"\r",
											"pm.test(\"Issue creation was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"how is that possible????\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n                {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/issues",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"issues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add comment to new issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Updating issue information was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add comment\", function () {\r",
											"   pm.expect(jsonData.comment.body).to.eql(\"I love testing\");\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": \"I love testing\",\r\n    \"issueId\": {{issue_id}},\r\n    \"userId\": {{current_user_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add second comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Updating issue information was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add comment\", function () {\r",
											"   pm.expect(jsonData.comment.body).to.eql(\"This is important bug cookie\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": \"This is important bug cookie\",\r\n    \"issueId\": {{issue_id}},\r\n    \"userId\": {{current_user_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if comments are added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Get request was successful\", function () {  \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Comments successful added\", function () {     \r",
											"    pm.expect(jsonData.issue.comments.body).to.eql(pm.globals.get(\"I love testing \"));\r",
											"    pm.expect(jsonData.issue.comments.body).to.eql(pm.globals.get(\"This is important bug cookie\"));\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/issues/{{issue_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"issues",
										"{{issue_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment with special symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Updating issue information was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add comment\", function () {\r",
											"   pm.expect(jsonData.comment.body).to.eql(\"C¤%&/¤kies\");\r",
											"\r",
											"});\r",
											"// Comment with special letters/symbols are allowed in field"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": \"C¤%&/¤kies\",\r\n    \"issueId\": {{issue_id}},\r\n    \"userId\": {{current_user_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Speical comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Get request was successful\", function () {  \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Comments successful added\", function () {     \r",
											"    pm.expect(jsonData.issue.comments.body).to.eql(pm.globals.get(\"C¤%&/¤kies\"));\r",
											"   \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/issues/{{issue_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"issues",
										"{{issue_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Updating issue information was unsuccessful\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Required field error\", function () {\r",
											"   pm.expect(jsonData.error.data.fields.body).to.eql(\"This field is required\");\r",
											"   pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
											"     \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": null,\r\n    \"issueId\": null,\r\n    \"userId\":null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Comments",
					"item": [
						{
							"name": "Create new comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"commentId\",jsonData.comment.id);\r",
											"\r",
											"\r",
											"pm.test(\"Updating issue information was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add comment\", function () {\r",
											"   pm.expect(jsonData.comment.body).to.eql(\"Bug Buster\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\":\"Bug Buster\",\r\n    \"issueId\":{{issue_id}},\r\n    \"userId\":{{current_user_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Updating issue information was unsuccessful\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Required field error\", function () {\r",
											"   pm.expect(jsonData.error.message).to.eql(\"There were validation errors.\");\r",
											"   pm.expect(jsonData.error.data.fields.body).to.eql(\"This field is required\");\r",
											"   pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");     \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": null   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments/{{commentId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update/Change Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment update was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Comment update is done\", function () {\r",
											"    pm.expect(jsonData.comment.body).to.eql(\"Bug Buster One\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\":\"Bug Buster One\"    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments/{{commentId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment by non-existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Error\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Unsuccessfully updated\", function () {\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Comment not found.\");\r",
											"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\");\r",
											"});\r",
											"\r",
											"//With non-excting id is unable to comment with"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\":\"Apple\"    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments/0987654",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"0987654"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Comments",
					"item": [
						{
							"name": "Comment deletion check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Issue deletion was successful\", function () {\r",
											"    pm.expect(jsonData.comment.body).to.eql(\"Bug Buster One\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\":\"Bug\"   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments/{{commentId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if comment is deleted by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment update was successful\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Comment update is done\", function () {\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Comment not found.\");\r",
											"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\");\r",
											"});\r",
											"//Can not update the comment because it already been deleted and no longer to be found\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\":\"Bug Buster One\"    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/comments/{{commentId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment with non-exciting ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Issue deletion was successful\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/comments/09876543215",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"09876543215"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Time tracking: Time spent",
			"item": [
				{
					"name": "Create new issue (prerequisite step)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"how is that possible????\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n                {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Step for logging Spent time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating issue information was successful\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									"pm.test(\"Logging Spent times are successfully added\", function () {\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(5);\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(4);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": 5,\r\n    \"timeRemaining\": 4    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Removing logged Spent time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating issue information was successful\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									"pm.test(\"Logging Spent times are removed\", function () {\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"});\r",
									"// has to be null because 0 is still a value"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\":null,\r\n    \"timeRemaining\":null   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maximum number of hours(Time spent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating issue information unsuccessful\", function () {\r",
									"    pm.response.to.have.status(500);    \r",
									"});\r",
									"\r",
									"pm.test(\"Time spent is failed\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Something went wrong, please contact our support.\");\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\");\r",
									"});\r",
									"//System gives no error when there is less than 10 digits with 10 digist system does give error\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\":9999999000    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maximum number of hours(Time remaining)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating issue information unsuccessful\", function () {\r",
									"    pm.response.to.have.status(500);    \r",
									"});\r",
									"\r",
									"pm.test(\"Time Remaining is failed\", function () {\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Something went wrong, please contact our support.\");\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\");\r",
									"});\r",
									"//System gives no error when there is less than 10 digits with 10 digist system does give error\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"timeRemaining\":9999999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: Estimate",
			"item": [
				{
					"name": "Create new issue (prerequisite step)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"how is that possible????\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n                {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Step for logging Estimate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating issue information was successful\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									"pm.test(\"Estimate(HOURS) successfully updated\", function () {\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(9);   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"estimate\": 9  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Removing logged Estimate(HOURS)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating issue information was successful\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									"pm.test(\"Estimate(HOURS) is removed\", function () {\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\":null\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maximum number of hours(Estimate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating issue information was successful\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									"pm.test(\"Estimate(HOURS) successfully updated\", function () {\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(9999990000);   \r",
									"});\r",
									"//System gives no error when there is less than 10 digits with 10 digist system does give error\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"estimate\":9999990000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jira-api.ivorreic.com",
			"type": "string"
		}
	]
}